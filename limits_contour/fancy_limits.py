#fancy limit plotter, unfortunately doesn't woth with CMMSSW environment (yet). Requires scipy >=1.4

from scipy import interpolate
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib.colors as mcol





exp = np.array([
	[1000.0, 3.0, 0.0366],
[1050.0, 3.0, 0.0493],
[1100.0, 3.0, 0.063],
[1150.0, 3.0, 0.0845],
[1200.0, 3.0, 0.1089],
[1250.0, 3.0, 0.1538],
[1300.0, 3.0, 0.1963],
[1350.0, 3.0, 0.251],
[1400.0, 3.0, 0.3428],
[1450.0, 3.0, 0.4355],
[1500.0, 3.0, 0.5645],
[1550.0, 3.0, 0.793],
[1600.0, 3.0, 0.9961],
[1650.0, 3.0, 1.3359],
[1700.0, 3.0, 2.0547],
[1750.0, 3.0, 2.7266],
[1800.0, 3.0, 4.3906],
[1850.0, 3.0, 4.0469],
[1900.0, 3.0, 9.2813],
[1950.0, 3.0, 8.4063],
[2000.0, 3.0, 7.8438],
[1000.0, 53.0, 0.0161],
[1050.0, 53.0, 0.022],
[1100.0, 53.0, 0.0288],
[1150.0, 53.0, 0.0386],
[1200.0, 53.0, 0.0513],
[1250.0, 53.0, 0.0649],
[1300.0, 53.0, 0.0864],
[1350.0, 53.0, 0.1138],
[1400.0, 53.0, 0.1499],
[1450.0, 53.0, 0.1909],
[1500.0, 53.0, 0.2549],
[1550.0, 53.0, 0.333],
[1600.0, 53.0, 0.4277],
[1650.0, 53.0, 0.5488],
[1700.0, 53.0, 0.7754],
[1750.0, 53.0, 0.9648],
[1800.0, 53.0, 1.293],
[1850.0, 53.0, 1.5352],
[1900.0, 53.0, 2.6172],
[1950.0, 53.0, 2.5703],
[2000.0, 53.0, 3.9219],
[1000.0, 103.0, 0.0142],
[1050.0, 103.0, 0.0181],
[1100.0, 103.0, 0.0239],
[1150.0, 103.0, 0.0317],
[1200.0, 103.0, 0.0405],
[1250.0, 103.0, 0.0532],
[1300.0, 103.0, 0.0718],
[1350.0, 103.0, 0.0923],
[1400.0, 103.0, 0.1167],
[1450.0, 103.0, 0.1519],
[1500.0, 103.0, 0.1938],
[1550.0, 103.0, 0.2529],
[1600.0, 103.0, 0.3291],
[1650.0, 103.0, 0.4199],
[1700.0, 103.0, 0.543],
[1750.0, 103.0, 0.6895],
[1800.0, 103.0, 0.957],
[1850.0, 103.0, 1.2695],
[1900.0, 103.0, 1.5195],
[1950.0, 103.0, 1.9141],
[2000.0, 103.0, 2.5234],
[1000.0, 153.0, 0.0132],
[1050.0, 153.0, 0.0181],
[1100.0, 153.0, 0.0239],
[1150.0, 153.0, 0.0317],
[1200.0, 153.0, 0.0405],
[1250.0, 153.0, 0.0542],
[1300.0, 153.0, 0.0698],
[1350.0, 153.0, 0.0903],
[1400.0, 153.0, 0.1147],
[1450.0, 153.0, 0.1479],
[1500.0, 153.0, 0.189],
[1550.0, 153.0, 0.2432],
[1600.0, 153.0, 0.3154],
[1650.0, 153.0, 0.3965],
[1700.0, 153.0, 0.502],
[1750.0, 153.0, 0.627],
[1800.0, 153.0, 0.8398],
[1850.0, 153.0, 1.0742],
[1900.0, 153.0, 1.5195],
[1950.0, 153.0, 1.9141],
[2000.0, 153.0, 2.5234],
[1000.0, 203.0, 0.0142],
[1050.0, 203.0, 0.019],
[1100.0, 203.0, 0.0259],
[1150.0, 203.0, 0.0327],
[1200.0, 203.0, 0.0425],
[1250.0, 203.0, 0.0562],
[1300.0, 203.0, 0.0718],
[1350.0, 203.0, 0.0962],
[1400.0, 203.0, 0.1196],
[1450.0, 203.0, 0.1538],
[1500.0, 203.0, 0.1982],
[1550.0, 203.0, 0.251],
[1600.0, 203.0, 0.3291],
[1650.0, 203.0, 0.4199],
[1700.0, 203.0, 0.5371],
[1750.0, 203.0, 0.6895],
[1800.0, 203.0, 0.832],
[1850.0, 203.0, 1.0742],
[1900.0, 203.0, 1.5195],
[1950.0, 203.0, 1.8828],
[2000.0, 203.0, 2.5234],
[1000.0, 253.0, 0.0151],
[1050.0, 253.0, 0.02],
[1100.0, 253.0, 0.0269],
[1150.0, 253.0, 0.0347],
[1200.0, 253.0, 0.0454],
[1250.0, 253.0, 0.062],
[1300.0, 253.0, 0.0786],
[1350.0, 253.0, 0.1001],
[1400.0, 253.0, 0.1284],
[1450.0, 253.0, 0.1646],
[1500.0, 253.0, 0.21],
[1550.0, 253.0, 0.2705],
[1600.0, 253.0, 0.3428],
[1650.0, 253.0, 0.4473],
[1700.0, 253.0, 0.5371],
[1750.0, 253.0, 0.6855],
[1800.0, 253.0, 0.9492],
[1850.0, 253.0, 1.0664],
[1900.0, 253.0, 1.5195],
[1950.0, 253.0, 1.8828],
[2000.0, 253.0, 2.5234],
[1000.0, 303.0, 0.0161],
[1050.0, 303.0, 0.021],
[1100.0, 303.0, 0.0278],
[1150.0, 303.0, 0.0366],
[1200.0, 303.0, 0.0493],
[1250.0, 303.0, 0.064],
[1300.0, 303.0, 0.0815],
[1350.0, 303.0, 0.1069],
[1400.0, 303.0, 0.1353],
[1450.0, 303.0, 0.1724],
[1500.0, 303.0, 0.2295],
[1550.0, 303.0, 0.2803],
[1600.0, 303.0, 0.3604],
[1650.0, 303.0, 0.4746],
[1700.0, 303.0, 0.5801],
[1750.0, 303.0, 0.7559],
[1800.0, 303.0, 0.9492],
[1850.0, 303.0, 1.2617],
[1900.0, 303.0, 1.5039],
[1950.0, 303.0, 1.8828],
[2000.0, 303.0, 2.5234],
[1000.0, 353.0, 0.0171],
[1050.0, 353.0, 0.022],
[1100.0, 353.0, 0.0288],
[1150.0, 353.0, 0.0386],
[1200.0, 353.0, 0.0503],
[1250.0, 353.0, 0.0669],
[1300.0, 353.0, 0.0903],
[1350.0, 353.0, 0.1138],
[1400.0, 353.0, 0.144],
[1450.0, 353.0, 0.186],
[1500.0, 353.0, 0.2373],
[1550.0, 353.0, 0.3037],
[1600.0, 353.0, 0.4004],
[1650.0, 353.0, 0.5078],
[1700.0, 353.0, 0.6348],
[1750.0, 353.0, 0.8477],
[1800.0, 353.0, 1.0859],
[1850.0, 353.0, 1.2617],
[1900.0, 353.0, 1.9141],
[1950.0, 353.0, 2.5703],
[2000.0, 353.0, 2.5234],
[1000.0, 403.0, 0.0171],
[1050.0, 403.0, 0.0229],
[1100.0, 403.0, 0.0298],
[1150.0, 403.0, 0.0396],
[1200.0, 403.0, 0.0532],
[1250.0, 403.0, 0.0688],
[1300.0, 403.0, 0.0913],
[1350.0, 403.0, 0.1196],
[1400.0, 403.0, 0.1538],
[1450.0, 403.0, 0.1963],
[1500.0, 403.0, 0.2451],
[1550.0, 403.0, 0.3174],
[1600.0, 403.0, 0.4004],
[1650.0, 403.0, 0.5449],
[1700.0, 403.0, 0.6973],
[1750.0, 403.0, 0.8477],
[1800.0, 403.0, 1.0859],
[1850.0, 403.0, 1.5352],
[1900.0, 403.0, 1.9141],
[1950.0, 403.0, 2.5703],
[2000.0, 403.0, 2.5234],
[1000.0, 453.0, 0.019],
[1050.0, 453.0, 0.0239],
[1100.0, 453.0, 0.0317],
[1150.0, 453.0, 0.0405],
[1200.0, 453.0, 0.0532],
[1250.0, 453.0, 0.0688],
[1300.0, 453.0, 0.0942],
[1350.0, 453.0, 0.1206],
[1400.0, 453.0, 0.1567],
[1450.0, 453.0, 0.2021],
[1500.0, 453.0, 0.2646],
[1550.0, 453.0, 0.3486],
[1600.0, 453.0, 0.4238],
[1650.0, 453.0, 0.5449],
[1700.0, 453.0, 0.6973],
[1750.0, 453.0, 0.957],
[1800.0, 453.0, 1.0859],
[1850.0, 453.0, 1.5352],
[1900.0, 453.0, 1.9141],
[1950.0, 453.0, 2.5234],
[2000.0, 453.0, 3.8281],
[1000.0, 503.0, 0.02],
[1050.0, 503.0, 0.0249],
[1100.0, 503.0, 0.0317],
[1150.0, 503.0, 0.0415],
[1200.0, 503.0, 0.0562],
[1250.0, 503.0, 0.0718],
[1300.0, 503.0, 0.0933],
[1350.0, 503.0, 0.1226],
[1400.0, 503.0, 0.1646],
[1450.0, 503.0, 0.208],
[1500.0, 503.0, 0.2744],
[1550.0, 503.0, 0.3486],
[1600.0, 503.0, 0.4512],
[1650.0, 503.0, 0.5918],
[1700.0, 503.0, 0.6934],
[1750.0, 503.0, 0.957],
[1800.0, 503.0, 1.2852],
[1850.0, 503.0, 1.5352],
[1900.0, 503.0, 1.9141],
[1950.0, 503.0, 2.5703],
[2000.0, 503.0, 3.8281],
[1000.0, 553.0, 0.022],
[1050.0, 553.0, 0.0269],
[1100.0, 553.0, 0.0337],
[1150.0, 553.0, 0.0435],
[1200.0, 553.0, 0.0532],
[1250.0, 553.0, 0.0737],
[1300.0, 553.0, 0.0933],
[1350.0, 553.0, 0.1206],
[1400.0, 553.0, 0.1606],
[1450.0, 553.0, 0.208],
[1500.0, 553.0, 0.2764],
[1550.0, 553.0, 0.3506],
[1600.0, 553.0, 0.4551],
[1650.0, 553.0, 0.5918],
[1700.0, 553.0, 0.7715],
[1750.0, 553.0, 0.957],
[1800.0, 553.0, 1.2852],
[1850.0, 553.0, 1.5352],
[1900.0, 553.0, 1.9141],
[1950.0, 553.0, 2.5234],
[2000.0, 553.0, 3.8281],
[1000.0, 603.0, 0.0269],
[1050.0, 603.0, 0.0308],
[1100.0, 603.0, 0.0366],
[1150.0, 603.0, 0.0454],
[1200.0, 603.0, 0.0571],
[1250.0, 603.0, 0.0747],
[1300.0, 603.0, 0.0952],
[1350.0, 603.0, 0.1226],
[1400.0, 603.0, 0.1577],
[1450.0, 603.0, 0.208],
[1500.0, 603.0, 0.2764],
[1550.0, 603.0, 0.3682],
[1600.0, 603.0, 0.4551],
[1650.0, 603.0, 0.5918],
[1700.0, 603.0, 0.7715],
[1750.0, 603.0, 0.957],
[1800.0, 603.0, 1.2852],
[1850.0, 603.0, 1.5352],
[1900.0, 603.0, 2.6172],
[1950.0, 603.0, 2.5703],
[2000.0, 603.0, 3.8281],
[1000.0, 653.0, 0.0347],
[1050.0, 653.0, 0.0366],
[1100.0, 653.0, 0.0405],
[1150.0, 653.0, 0.0503],
[1200.0, 653.0, 0.0601],
[1250.0, 653.0, 0.0757],
[1300.0, 653.0, 0.0991],
[1350.0, 653.0, 0.1274],
[1400.0, 653.0, 0.1577],
[1450.0, 653.0, 0.208],
[1500.0, 653.0, 0.2783],
[1550.0, 653.0, 0.3506],
[1600.0, 653.0, 0.4551],
[1650.0, 653.0, 0.5918],
[1700.0, 653.0, 0.7715],
[1750.0, 653.0, 0.957],
[1800.0, 653.0, 1.2852],
[1850.0, 653.0, 1.5352],
[1900.0, 653.0, 2.6172],
[1950.0, 653.0, 2.5703],
[2000.0, 653.0, 3.9219],
[1000.0, 703.0, 0.0425],
[1050.0, 703.0, 0.0444],
[1100.0, 703.0, 0.0474],
[1150.0, 703.0, 0.0537],
[1200.0, 703.0, 0.0659],
[1250.0, 703.0, 0.0776],
[1300.0, 703.0, 0.0962],
[1350.0, 703.0, 0.1274],
[1400.0, 703.0, 0.1646],
[1450.0, 703.0, 0.21],
[1500.0, 703.0, 0.2783],
[1550.0, 703.0, 0.3525],
[1600.0, 703.0, 0.4551],
[1650.0, 703.0, 0.5957],
[1700.0, 703.0, 0.7754],
[1750.0, 703.0, 0.9648],
[1800.0, 703.0, 1.2852],
[1850.0, 703.0, 1.5352],
[1900.0, 703.0, 2.6172],
[1950.0, 703.0, 2.5703],
[2000.0, 703.0, 3.9219],
[1000.0, 753.0, 0.0679],
[1050.0, 753.0, 0.0591],
[1100.0, 753.0, 0.061],
[1150.0, 753.0, 0.061],
[1200.0, 753.0, 0.0718],
[1250.0, 753.0, 0.0835],
[1300.0, 753.0, 0.105],
[1350.0, 753.0, 0.1265],
[1400.0, 753.0, 0.1646],
[1450.0, 753.0, 0.21],
[1500.0, 753.0, 0.2783],
[1550.0, 753.0, 0.3525],
[1600.0, 753.0, 0.4551],
[1650.0, 753.0, 0.5957],
[1700.0, 753.0, 0.7754],
[1750.0, 753.0, 0.9648],
[1800.0, 753.0, 1.293],
[1850.0, 753.0, 1.9609],
[1900.0, 753.0, 2.6172],
[1950.0, 753.0, 2.5703],
[2000.0, 753.0, 3.9219],
[1000.0, 803.0, 0.0884],
[1050.0, 803.0, 0.0874],
[1100.0, 803.0, 0.0815],
[1150.0, 803.0, 0.0825],
[1200.0, 803.0, 0.0864],
[1250.0, 803.0, 0.0962],
[1300.0, 803.0, 0.1099],
[1350.0, 803.0, 0.1382],
[1400.0, 803.0, 0.1724],
[1450.0, 803.0, 0.21],
[1500.0, 803.0, 0.2666],
[1550.0, 803.0, 0.3525],
[1600.0, 803.0, 0.457],
[1650.0, 803.0, 0.5996],
[1700.0, 803.0, 0.7754],
[1750.0, 803.0, 0.9648],
[1800.0, 803.0, 1.293],
[1850.0, 803.0, 1.9609],
[1900.0, 803.0, 2.6172],
[1950.0, 803.0, 2.5703],
[2000.0, 803.0, 3.9219],
[1000.0, 853.0, 0.1606],
[1050.0, 853.0, 0.1353],
[1100.0, 853.0, 0.1177],
[1150.0, 853.0, 0.1089],
[1200.0, 853.0, 0.1099],
[1250.0, 853.0, 0.1128],
[1300.0, 853.0, 0.1265],
[1350.0, 853.0, 0.146],
[1400.0, 853.0, 0.1802],
[1450.0, 853.0, 0.2217],
[1500.0, 853.0, 0.2666],
[1550.0, 853.0, 0.3525],
[1600.0, 853.0, 0.457],
[1650.0, 853.0, 0.5996],
[1700.0, 853.0, 0.7754],
[1750.0, 853.0, 0.9648],
[1800.0, 853.0, 1.293],
[1850.0, 853.0, 1.9922],
[1900.0, 853.0, 1.9141],
[1950.0, 853.0, 2.5703],
[2000.0, 853.0, 3.9219],
    ]
)




def interp(data, method='linear'):
    x = data[:,0]
    y = data[:,1]
    z = data[:,2]
    
    xi = np.linspace(x.min(), x.max(), 1000)
    yi = np.linspace(y.min(), y.max(), 1000)
    zi = mlab.griddata(x, y, z, xi, yi, interp=method)
    
    return xi, yi, zi



def interp2(data, method='linear'):
    x = data[:,0]
    y = data[:,1]
    z = data[:,2]
    
    xi = np.linspace(x.min(), x.max(), 1000)
    yi = np.linspace(y.min(), y.max(), 1000)
    xi, yi = np.meshgrid(xi,yi)
    zi = interpolate.griddata((x, y), z, (xi, yi), method=method)
    
    return xi, yi, zi



def interp3(data, method='linear'):
    x = data[:,0]
    y = data[:,1]
    z = data[:,2]
    
    xi = np.linspace(x.min(), x.max(), 1000)
    yi = np.linspace(y.min(), y.max(), 1000)
    xi, yi = np.meshgrid(xi,yi)
    zi = interpolate.LinearNDInterpolator(x, y, z, method=method)(xi, yi)
    
    return xi, yi, zi



stops = [0.0000, 0.1250, 0.2500, 0.3750, 0.5000, 0.6250, 0.7500, 0.8750, 1.0000]
red   = [0.2082, 0.0592, 0.0780, 0.0232, 0.1802, 0.5301, 0.8186, 0.9956, 0.9764]
green = [0.1664, 0.3599, 0.5041, 0.6419, 0.7178, 0.7492, 0.7328, 0.7862, 0.9832]
blue  = [0.5293, 0.8684, 0.8385, 0.7914, 0.6425, 0.4662, 0.3499, 0.1968, 0.0539]

ered = []
egreen = []
eblue = []
for i, stop in enumerate(stops):
    if i is 0:
        ered.append( (stop, 0., red[i]) )
        egreen.append( (stop, 0., green[i]) )
        eblue.append( (stop, 0., blue[i]) )
    elif i is len(stops)-1:
        ered.append( (stop, red[i], 1.) )
        egreen.append( (stop, green[i], 1.) )
        eblue.append( (stop, blue[i], 1.) )
    else:
        ered.append( (stop, red[i], red[i]) )
        egreen.append( (stop, green[i], green[i]) )
        eblue.append( (stop, blue[i], blue[i]) )
cdict = {'red': ered, 'green': egreen, 'blue': eblue}

bird = mcol.LinearSegmentedColormap('bird', cdict)




xi, yi, zi = interp2(exp, 'cubic')
plt.contour(xi, yi, zi, [1.0], colors='k')
plt.contourf(xi, yi, zi, 200, cmap=bird)
plt.xlabel('M_Squark')
plt.ylabel('M_LSP')
plt.colorbar()


plt.title('Cubic interpolation')
plt.show()

xi, yi, zi = interp2(exp, 'linear')
plt.contour(xi, yi, zi, [1.0], colors='k')
plt.contourf(xi, yi, zi, 200, cmap=bird)
plt.xlabel('M_Squark')
plt.ylabel('M_LSP')
plt.colorbar()

plt.title('Linear interpolation')
plt.show()
